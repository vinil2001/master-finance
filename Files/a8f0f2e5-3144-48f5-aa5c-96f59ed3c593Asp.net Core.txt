В ASP.net CORE поддерживает 3 разных архитектуры при разработке веб-приложений:
- MVC
- Razor Pages (страницы razor)
- Blazor Components (Blazor-компоненты)
Отдельно можно добавить
- Web Api


DLL

BLL
NewsService

Web.API

Angular/MVC/Blazor



Blazor совместим с Razor-pages, но не совместим с MVC. 
Razor Pages совместим с MVC. 

В Razor-страницы можно встраивать динамические Blazor-компоненты, но не наоборот. 


Razor pages - это представления, которые имеют свой собственный C#-файл, полностью управляющий этим представлением. 
Razor-страницы маршрутизируются через так называемые зоны - Areas. 
Зоны - это наборы папок в проекте, имена которых выступают в качестве элементов URL-адреса. 

При обращении к razor-странице в зоне, в URL-адресе должны быть указаны:
- имя домена
- имя зоны
- имя razor-страницы:
https://localhost:4534/Products/Catalog/
В зоне могут быть дополнительные папки, тогда доступ к их страницам будет следующим, например:
https://localhost:4534/Products/Admin/EditCatalog


Blazor-компоненты условно можно разделить на две группы:
- Это "встраиваемые" компоненты, которые могут быть вставлены в Razor-страницы или в другие Blazor-компоненты
Встраиваются с помощью тега, имя которого совпадает с названием компонента
- Это компоненты-страницы, которые имеют собственный маршрут-url адрес. 
Встраивается в место вызова @Body

-------------------------Конвеер обработки HTTP-запросов-------------------

Можно сказать, что любое веб-приложение в ASP.net CORE - это объект класса WebHost, 
возможности которого можно расширять. 
Главная задача объекта WebHost - это ожидание HTTP-запросов, их обработка и генерация ответа. 

Выполнение ASP.net Core приложения начинается с метода main в файле Program.cs, задача которого
создать объект WebHost-а. 

Так как WebHost сложный объект, его создание напрямую не осуществляется. Для этих целей
используется специальный класс - WebHostBuilder (Строитель веб-хоста). 
То есть используется паттерн "Строитель" (Builder). 


   	public static void Main(string[] args)
        {
            CreateHostBuilder(args).Build().Run();
        }

        public static IHostBuilder CreateHostBuilder(string[] args)
        {
            return Host.CreateDefaultBuilder(args)
                .ConfigureWebHostDefaults((webBuilder) =>
                {
                    webBuilder.UseStartup<Startup>();
                });
        }

Здесь:
1. CreateHostBuilder(...) - запускает метод создания строителя веб-хоста, описанный ниже...
2. Host.CreateDefaultBuilder() - Создаёт стандартный строитель веб-хост. 
3. ConfigureWebHostDefaults() - Настраиваем строитель веб-хоста
4. webBuilder.UseStartup<Startup>(); - Указываем, что настройки должна использоваться из файла StartUp. 

Класс Startup настраивает конвеер обработки HTTP-запросов WebHost-а. То есть именно в нём описаны правила того
как именно будут обработваться HTTP-запросы (get, post, put, delete).

Конвеер состоит из элементов (классом, методом и т.д.), каждый из которых может учавствовать в обработке 
HTTP-запроса или быть использован в любом классе или странице/представлении/компоненте.  

Эти элементы конвеера называют по разному. Самые распространённые варианты:
- Сервисы.
- MiddleWare (встраиваемое программное обеспечение). 
- Компоненты (конвеера). 

Класс StartUp обычно из конструктора и двух методов:
- ConfigureServices - настраиваем сервисы, которые планируется использовать в конвеере (при необходимости).
Сервисы которые находятся в конвеере по-умолчанию поступают в этот метод через параметр-коллекцию.
Также можно добавить новые сервисы в эту коллекцию, что называется регистрацией сервисов. 

- Configure - указывается, какие сервисы будут учавствовать в обработке каждого HTTP-запроса. 

----------------------------------EF Core---------------------------
1. Для установки EF Core нужно установить минимум следующие пакеты:
- Microsoft.EntityFrameworkCore
- Microsoft.EntityFrameworkCore.SqlServer
- Microsoft.EntityFrameworkCore.Design

2. Создать класс ApplicationDbContext следующим образом:

    public class ApplicationDbContext : DbContext
    {
        public ApplicationDbContext(DbContextOptions<ApplicationDbContext> options) : base(options)
        {

        }
    }

3. Добавляем объект класса ApplicationDbContext в конвеер (то есть регистрируем его как сервис). 
services.AddDbContext<ApplicationDbContext>(options => 
	options.UseSqlServer("MultipleActiveResultSets=True; Data Source=mssql4.1gb.ua;Initial Catalog=1gb_financedb2;Persist Security Info=True;User ID=1gb_nomad82;Password=1682bf8fnm"));

Кроме добавление контекта в конвеер как сервис, здесь также указывается, что используется MS Sql Server,
и строка соединения. 

4. Строку соединение не стоит писать прямо в C#-коде. В ASP.net CORE её принято указывать в конфигурационном
файле appsettings.json:
{
  "ConnectionStrings": {
    "DefaultConnection": "MultipleActiveResultSets=True; Data Source=mssql4.1gb.ua;Initial Catalog=1gb_financedb2;Persist Security Info=True;User ID=1gb_nomad82;Password=1682bf8fnm"
  },
  "Logging": {
    "LogLevel": {
      "Default": "Information",
      "Microsoft": "Warning",
      "Microsoft.Hosting.Lifetime": "Information"
    }
  },
  "AllowedHosts": "*"
}

"ConnectionStrings" - секция, определяющая возможные строки соединения. 
"DefaultConnection" - произвольное имя текущей строки соединения. 

5. Доступ к этому конфигурационному файлу appsettings.json представляется через объект Configuration.
Тогда, строку соединение можно извлечь и указать при регистрации контекста следующим образом:
services.AddDbContext<ApplicationDbContext>(
	options => 
		options.UseSqlServer(Configuration.GetConnectionString("DefaultConnection")));

6. Создать классы модели данных (их создают в папке Models в папке Data). 
7. Прописать DbSet в контексте
8. Сделать миграцию (команда enable-migration теперь не выполняется)
9. Чтобы использовать зарегистрированный контекст, нужно в классах или в страницах/компонентах
выполнить его инъекцию. 

-------------------Blazor-компоненты и Blazor-компоненты страницы-----------------

Условно можно поделить Blazor-компоненты на две группы:
- Blazor-компоненты страницы. Имяют свой адрес, указанный с помощью ключевого слова @page и встраивается в компонент
MainLayout в место вызова функции @Body
- Blazor-компоненты

-------------------------------------Интеграция шаблона сайта в Blazor-проект------------------------
1. Скопировать все ассеты (статичные файлы) в папку wwwroot
2. В razor-страницу _host переносим следующий HTML-код шаблона:
- весь тег <head>
- открытие тега <body>
- общие секции с preloader-ом
- общие модальные (pop-up) окна (под вопросам)
- закрытие </body> и подключение всех JS-файлов перед ним

В _Host-е нужно оставить подключение js-файла с библиотекой blazor, а также код вызова blazor-компонента App.razor

3. Общий код для всех страниц сайта (например, главное меню, footer и т.д.), переносим в компонент MainLayout.
3.1. По желанию можно для каждой из таких секций создать отдельные Blazor-компоненты и подставить их в MainLayout.
Подстановка выполняется с помощью тега, название которого сопвадает с именем компонента. 
Например, имеем компонент с именем footer.razor. Тогда, для его подстановки в коде другого компонента пишем:
<Footer/>

4. Создаём компонент главной страницы (или меняем имеющийся), переносим в него оставшийся HTML-код главной страницы шаблона.




















