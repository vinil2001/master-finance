@model Finance.Models.SheetDetailsCalculation
<link href="~/CSS/main.css" rel="stylesheet" />
@{
    ViewBag.Title = "EditCalculation";
    Layout = "~/Views/Shared/_Layout.cshtml";
}

<div id="spinner" class="spinner">
    <img src="~/pictures/Coolors-1s-200px.gif" />
</div>
<div id="panel"></div>

<h2>Расчет деталей - редактирование</h2>
@Html.AntiForgeryToken()
<form action="/SheetDetailsCalculation/EditCalculation" method="post">
    <input type="hidden" id="@Model.Id" name="Id" value="@Model.Id" />
    <div class="col-md-12" style="border-bottom: solid 1px #eee; padding-bottom: 30px;">
        <div class="inline col-md-8">
            <div>
                <div class="col-md-4">
                    <label>Дата расчета</label>
                    @Html.EditorFor(model => model.CalculationDate, new { htmlAttributes = new { @class = "form-control calcDate", id = "datePicker", name = "CalculationDate" } })
                    @Html.ValidationMessageFor(model => model.InvoiceDate, "", new { @class = "text-danger" })
                </div>
                @*<input class="col-md-4 calcDate" id="datePicker" name="CalculationDate" required />*@
            </div>
        </div>
        <div class="inline col-md-4 float-right">
            <div>
                <label>№ Счета поставщика</label>
                @Html.EditorFor(model => model.InvoiceNumber, new { htmlAttributes = new { @class = "form-control", id = "InvoiceNumber", name = "InvoiceNumber" } })
                @Html.ValidationMessageFor(model => model.InvoiceNumber, "", new { @class = "text-danger" })
                @*<input id="InvoiceNumber" name="InvoiceNumber" class="form-control" required />*@
            </div>
            <div>
                <label>Дата счета</label>
                @Html.EditorFor(model => model.InvoiceDate, new { htmlAttributes = new { @class = "form-control", id = "InvoiceDate", name = "InvoiceDate" } })
                @Html.ValidationMessageFor(model => model.InvoiceDate, "", new { @class = "text-danger" })
                @*<input type="text" id="InvoiceDate" name="InvoiceDate" class="form-control" required />*@
            </div>
        </div>
    </div>

    <hr />
    <label>Данные из счета</label>
    <div style="border-bottom: solid 1px #eee; padding-bottom: 30px;" class="form-group col-md-12">
        <div class="inline col-md-3">
            <label>Сумма без НДС за метериал</label>
            @Html.EditorFor(model => model.MaterialPrice, new { htmlAttributes = new { @class = "allowFloat form-control", id = "MaterialPrice", name = "MaterialPrice", onchange = "SaveButtonHide()" } })
            @Html.ValidationMessageFor(model => model.MaterialPrice, "", new { @class = "text-danger" })
            @*<input id="MaterialPrice" name="MaterialPrice" type="text" class="allowFloat form-control" required />*@
        </div>
        <div class="inline col-md-3">
            <label>Сумма без НДС за порезку</label>
            @Html.EditorFor(model => model.CuttingPrice, new { htmlAttributes = new { @class = "allowFloat form-control", id = "CuttingPrice", name = "CuttingPrice", onchange = "SaveButtonHide()" } })
            @Html.ValidationMessageFor(model => model.CuttingPrice, "", new { @class = "text-danger" })
            @*<input id="CuttingPrice" name="CuttingPrice" type="text" class="allowFloat form-control" required />*@
        </div>
        <div class="inline col-md-2">
            <label>Площадь листа (м.кв.)</label>
            @Html.EditorFor(model => model.Area, new { htmlAttributes = new { @class = "allowFloat form-control", id = "Area", name = "Area", onchange = "SaveButtonHide()" } })
            @Html.ValidationMessageFor(model => model.Area, "", new { @class = "text-danger" })
            @*<input id="Area" type="text" name="Area" class="allowFloat form-control" required />*@
        </div>
        <div class="inline col-md-2">
            <label>Толщина матер., мм.</label>
            @Html.EditorFor(model => model.SheetThickness, new { htmlAttributes = new { @class = "allowFloat form-control", id = "SheetThickness", name = "SheetThickness" } })
            @Html.ValidationMessageFor(model => model.SheetThickness, "", new { @class = "text-danger" })
            @*<input id="SheetThickness" name="SheetThickness" type="text" class="allowFloat form-control" required />*@
        </div>
        <div class="inline col-md-2">
            <label>Коэф.отхода</label>
            @Html.EditorFor(model => model.WasteCoeficcient, new { htmlAttributes = new { @class = "allowFloat form-control", id = "WasteCoeficcient", name = "WasteCoeficcient", @readonly = "readonly" } })
            @Html.ValidationMessageFor(model => model.WasteCoeficcient, "", new { @class = "text-danger" })
            @*<input readonly id="WasteCoeficcient" name="WasteCoeficcient" type="text" class="allowFloat form-control" />*@
        </div>
    </div>
    <hr />
    <br />
    <label>Размеры и количество заготовок</label>
    <div id="details">
        @{int DetailNumber = 1; }
        @foreach (var i in Model.DetailsCalculation)
        {
            i.Detail.DetailNumber = DetailNumber;
            <div class="col-md-12 form-group">
                <div class="inline col-md-1">
                    @if (i.Detail.DetailNumber == 1)
                    {
                        <label>№</label>
                    }
                    else
                    {
                        <label></label>
                    }
                    <input name="DetailNumber" class="form-control" value="@i.Detail.DetailNumber" readonly onchange="SaveButtonHide()" />
                </div>
                <div class="inline col-md-2">
                    @if (i.Detail.DetailNumber == 1)
                    {
                        <label>Название детали</label>
                    }
                    else
                    {
                        <label></label>
                    }
                    <input name="DetailName" class="form-control" value="@i.Detail.DetailName" required />
                    <input name="DetailId" id="DetailId" hidden value="@i.Detail.Id" />
                </div>
                <div class="inline col-md-2">
                    @if (i.Detail.DetailNumber == 1)
                    {
                        <label>Длина мм.</label>
                    }
                    else
                    {
                        <label></label>
                    }
                    <input name="DetailLength" class="allowFloat form-control" type="text" value="@i.Detail.DetailLength" required onchange="SaveButtonHide()" />
                </div>
                <div class="inline col-md-2">
                    @if (i.Detail.DetailNumber == 1)
                    {
                        <label>Ширина мм.</label>
                    }
                    else
                    {
                        <label></label>
                    }
                    <input name="DetailWidth" class="allowFloat form-control" type="text" value="@i.Detail.DetailWidth" required onchange="SaveButtonHide()" />
                </div>
                <div class="inline col-md-1">
                    @if (i.Detail.DetailNumber == 1)
                    {
                        <label>Кол-во шт.</label>
                    }
                    else
                    {
                        <label></label>
                    }
                    <input name="DetailAmount" class="allowFloat form-control" type="text" value="@i.Amount" required onchange="SaveButtonHide()" />
                </div>
                <div class="inline col-md-3">
                    @if (i.Detail.DetailNumber == 1)
                    {
                        <label>Цена детали с порезкой без НДС</label>
                    }
                    else
                    {
                        <label></label>
                    }
                    <input name="DetailPrice" class="form-control detail-price" value="@i.DetailPrice" readonly type="text" />
                </div>
                <div class="inline col-md-1">
                    @if (i.Detail.DetailNumber == 1)
                    {
                        <label>Удалить</label>
                        @*<button onclick='alert("Удаление первой детали запрещено")' type='button' class='btn btn-danger form-control'>X</button>*@
                    }
                    else
                    {
                        <label></label>
                        @*<button onclick='RemoveDetail(event)' type='button' class='btn btn-danger form-control'>X</button>*@
                    }
                    <button onclick='RemoveDetail(event)' type='button' class='btn btn-danger form-control'>X</button>
                </div>
            </div>
            DetailNumber++;
        }
    </div>
    <div>
        <div onclick="AddDetail()" class="inline btn btn-primary" style="cursor: pointer;"> Добавить деталь </div>
    </div>
    <hr />
    <br />
    <button class="btn btn-success" style="margin-right: 50px;" onclick="Calculate(event)">Раccчитать</button>
    <button id="save_btn" type='submit' class="btn btn-warning">Сохранить расчет</button>
    @*@Html.ActionLink("Сохранить расчет", "EditCalculation", new { id = Model.Id }, new { @class = "btn btn-warning" })*@
</form>
<div>
    @Html.ActionLink("Назад", "Index")
</div>
<script>
    function SaveButtonHide() {
        $("#save_btn").hide();
    }

    $(function () {
        $("#datePicker, #InvoiceDate").datepicker({
            dateFormat: "dd-mm-yy"
        });
    });
    let detailNumber = document.getElementsByName('DetailNumber')[document.getElementsByName('DetailNumber').length - 1].value;
    let detailNumbers = document.getElementsByName('DetailNumber');
    for (var i = 0; i < detailNumbers.length; i++) {
        detailNumbers[i].value = (i + 1);
    }

    function DetailsCount() {
        //console.log("details count: " + $("#details > div").length);
        return $("#details > div").length;
    }

    function AddDetail() {
        SaveButtonHide();
        detailNumber++;
        var newDiv = document.createElement('div');
        newDiv.classList.add('form-group', 'col-md-12');
        let innerHTML = "<div class='inline col-md-1'><label></label><input name='DetailNumber' class='form-control' readonly /></div>"
        innerHTML += "<div class='inline col-md-2'><label></label><input name='DetailName' class='form-control'/>";
        innerHTML += "<input type='hidden' name='DetailId' value='-1' class='form-control' /></div>";
        innerHTML += "<div class='inline col-md-2'><label></label><input name='DetailLength' class='allowFloat form-control' type='text'/></div>";
        innerHTML += "<div class='inline col-md-2'><label></label><input name='DetailWidth' class='allowFloat form-control' type='text'/></div>";
        innerHTML += "<div class='inline col-md-1'><label></label><input name='DetailAmount' class='allowFloat form-control' type='text'/></div>";
        innerHTML += "<div class='inline col-md-3'><label></label><input name='DetailPrice' class='form-control detail-price' readonly type='text'/></div >";
        innerHTML += "<div class='inline col-md-1'><label></label><button onclick='RemoveDetail(event)' type='button' class='btn btn-danger form-control'>X</button></div>";
        newDiv.innerHTML = innerHTML;
        newDiv.children[0].childNodes[1].setAttribute('value', detailNumber);
        var details = document.getElementById("details");
        var lastChild = details.lastChild;
        details.insertBefore(newDiv, lastChild.nextSibling);
        //Validation();
    }

    function RemoveDetail(e) {
        //console.log("details count: " + $("#details > div").length);
        if (DetailsCount() > 1) {
            SaveButtonHide();
            var a = e.target.parentNode.parentNode;
            e.target.parentNode.parentNode.remove();
            detailNumber--;
            let detNumbers = $('input[name=DetailNumber]');
            for (let i = 0; i < DetailsCount(); i++) {
                $(detNumbers[i]).val(i + 1);
            }
        } else {
            alert("Удаление последней детали запрещено. В расчете должна быть хотя бы одна деталь.");
        }
    }

    SaveButtonHide();

    function Validation() {
        let inputsValueArray = $("input");
        let formValidation = true;
        for (let i = 0; i < inputsValueArray.length; i++) {
            if ($(inputsValueArray[i]).val() == '' && !$(inputsValueArray[i]).is('[readonly]')) {
                $(inputsValueArray[i]).css("border", "2px dashed red");
                formValidation = false;
            }
            else {
                $(inputsValueArray[i]).css("border", "initial ");
            }
        }
        if ($("#WasteCoeficcient").val() != "" && formValidation == true) {
            $("#save_btn").show();
        }
        else {
            alert("Заполните все поля отмеченные красным.");
            SaveButtonHide();
        }
    }

    function Calculate(e) {
        e.preventDefault();
        $.ajax({
            type: "POST",
            url: "../../SheetDetailsCalculation/Calculation",
            data: $('form').serialize(),
            success: function (result) {
                let count = 0;
                let detailsPrices = [];
                let wasteCoef = 0;
                var detailPriceInputs = $('.detail-price');
                $.each(result, function (key, val) {
                    if (count == 1) {
                        $("#WasteCoeficcient").val(val.toString().replace('.', ','));
                        return;
                    }
                    detailsPrices = val;
                    for (let i = 0; i < detailsPrices.length; i++) {
                        $(detailPriceInputs[i]).val(detailsPrices[i].toString().replace('.', ','));
                    }
                    count++;
                })
                Validation();
            },
            error: function () {
                alert("error");
                Validation();
            }
        });
    }
    $('body').on('keypress keyup paste', 'input.allowFloat', function (event) {
        $(this).val($(this).val().replace(/[^0-9\,]/, ''));
        if ($(this).val().indexOf(',') != -1 && event.which == 44) {
            event.preventDefault();
        }
        SaveButtonHide();
    });
    $("#spinner").hide();
    $('body').on('click keypress keyup paste', "input[name='DetailName']", function (event) {
        $(this).autocomplete({
            source: function (request, response) {
                $("#spinner").show();
                var detailNameValue = $(this).attr("term");
                $.ajax({
                    url: "/SheetDetailsCalculation/GetDetailsByName/",
                    data: { detailNameValue: detailNameValue },
                    success: function (result) {
                        if (result.length > 0) {
                            response($.map(result, function (item) {
                                return { label: item.DetailName, id: item.ID, detLength: item.DetailLength, detWidth: item.DetailWidth };
                            }))
                            $(event.target).css("z-index", "2");
                            $(event.target).addClass("target");
                            $("#panel").css("display", "initial");
                        } else {
                            $("#spinner").hide();
                            $(event.target).css("z-index", "1");
                            $(event.target).removeClass("target");
                            $("#panel").css("display", "none");
                        } 
                    }
                });
            },
            select: function (event, ui) {
                $("#spinner").hide();
                $(event.target).css("z-index", "1");
                $(event.target).removeClass("target");
                $("#panel").css("display", "none");
                $(this).next('input').val(ui.item.id);
                var temp = $(this).next('input');
                console.log($(this).next('input').val());
                //$("#DetailId").val(ui.item.id);
                var detLength = $(this).closest('div').next('div').children('input');
                var detWidth = $(this).closest('div').next('div').next('div').children('input');
                detLength.val(ui.item.detLength.toString().replace('.', ','));
                detWidth.val(ui.item.detWidth.toString().replace('.', ','));
                detLength.prop('readonly', true);
                detWidth.prop('readonly', true);
            }
        });
    });
</script>